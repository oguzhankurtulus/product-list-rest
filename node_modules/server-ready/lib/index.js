'use strict';

var net = require('net');
var once = require('once');
var interval = 250;

module.exports = serverReady;

// The following params are accepted:
// port, cb
// port, host, cb
// port, timeout, cb
// port, host, timeout, cb
function serverReady(port) {
  var start = new Date();
  var timeout = serverReady.timeout;
  var host = void 0,
      hostOrTimeout = void 0,
      cb = void 0;

  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  switch (args.length) {
    case 1:
      cb = args[0];

      break;
    case 2:
      hostOrTimeout = args[0];
      cb = args[1];

      if (typeof hostOrTimeout === 'string') {
        host = hostOrTimeout;
      } else {
        timeout = hostOrTimeout;
      }
      break;
    default:
      host = args[0];
      timeout = args[1];
      cb = args[2];

  }

  cb = once(cb);

  var ready = false;
  var connect = function connect(port, cb) {

    var client = net.connect({ port: port, host: host }).on('connect', function () {

      ready = true;
      client.destroy();
      cb();
    }).on('error', function () {

      client.destroy();
    }).once('close', function () {

      if (new Date() - start > timeout) {
        return cb(new Error('Timeout'));
      }

      setTimeout(function () {
        return !ready && connect(port, cb);
      }, interval);
    });
  };

  connect(port, cb);
}

// default timeout (20s)
serverReady.timeout = 20 * 1000;